networks:
  ddpm_network:
    name: ddpm_network
    driver: bridge

services:
  redpanda:
    image: docker.redpanda.com/vectorized/redpanda:latest
    container_name: redpanda
    ports:
      - "9092:9092"
      - "9644:9644"
      - "4195:4195"
    command:
      - redpanda
      - start
      - --overprovisioned
      - --smp 1
      - --memory 1G
      - --reserve-memory 0M
      - --node-id 0
      - --check=false
      - --kafka-addr=PLAINTEXT://0.0.0.0:9092
      - --advertise-kafka-addr=PLAINTEXT://redpanda:9092
    volumes:
      - ./redpanda-data:/var/lib/redpanda/data
    networks:
      - ddpm_network
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  postgres:
    image: postgres:17
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: pipelines
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - ddpm_network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus-config:/etc/prometheus/
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    restart: unless-stopped
    networks:
      - ddpm_network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    restart: unless-stopped
    networks:
      - ddpm_network
  
  node-exporter:
    image: prom/node-exporter
    container_name: node-exporter
    ports:
      - "9100:9100"
    networks:
      - ddpm_network

  pipeline-manager:
    image: pipeline-manager:latest
    container_name: pipeline-manager
    build:
      context: ../../  # Use the project root as the build context
      dockerfile: deployments/docker/Dockerfile
    ports:
      - "8080:8080"
    environment:
      CONFIG_PATH: /app/config/app-config.yaml
    volumes:
      - ../../pipelines:/app/pipelines
      - ../../tests/integration/configs:/app/configs
    depends_on:
      - redpanda
      - postgres
    networks:
      - ddpm_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://0.0.0.0:8080/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

volumes:
  postgres-data:
  redpanda-data:
  prometheus-config:
  grafana-data:
